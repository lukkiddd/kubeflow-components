name: Validate csv using greatexpectations
inputs:
- name: input_path
  type: String
- name: expectation_suite_path
  type: String
outputs:
- name: mlpipeline_ui_metadata
implementation:
  container:
    image: python:3.8
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'great-expectations==0.13.11' 'google-cloud-storage==1.29.0' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'great-expectations==0.13.11'
      'google-cloud-storage==1.29.0' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def validate_csv_using_greatexpectations(
          input_path ,
          expectation_suite_path ,
          mlpipeline_ui_metadata_path ,
      ):
          import json
          import great_expectations as ge
          from great_expectations.render import DefaultJinjaPageView
          from great_expectations.render.renderer import ValidationResultsPageRenderer
          from google.cloud import storage
          import io

          _JSON = "json"
          _BYTES = "bytes"
          _GCS_PREFIX = "gs://"

          def _read_from_gcs(gcs_path , return_as=_JSON):
              storage_client = storage.Client()
              if not gcs_path.startswith(_GCS_PREFIX):
                  raise ValueError(f"Path must start with 'gs://', found: {gcs_path}")

              bucket_name = gcs_path.split("/")[2]
              file_path = '/'.join(gcs_path.split("/")[3:])
              bucket = storage_client.get_bucket(bucket_name)
              blob = bucket.get_blob(file_path)
              if not blob:
                  raise ValueError(f"Path {gcs_path} do not exists.")

              result = blob.download_as_string()

              if return_as == _JSON:
                  return json.loads(result)
              elif return_as == _BYTES:
                  return io.BytesIO(result)
              return result

          expectation_suite = _read_from_gcs(expectation_suite_path, return_as=_JSON)
          data = _read_from_gcs(input_path, return_as=_BYTES)
          df = ge.read_csv(data, expectation_suite=expectation_suite)
          result = df.validate()

          document_model = ValidationResultsPageRenderer().render(result)

          metadata = {
              'outputs' : [{
                'type': 'web-app',
                'storage': 'inline',
                'source': DefaultJinjaPageView().render(document_model),
              }]
          }
          with open(mlpipeline_ui_metadata_path, 'w') as metadata_file:
              json.dump(metadata, metadata_file)
          return metadata

      import argparse
      _parser = argparse.ArgumentParser(prog='Validate csv using greatexpectations', description='')
      _parser.add_argument("--input-path", dest="input_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--expectation-suite-path", dest="expectation_suite_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--mlpipeline-ui-metadata", dest="mlpipeline_ui_metadata_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = validate_csv_using_greatexpectations(**_parsed_args)

      _output_serializers = [

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --input-path
    - inputValue: input_path
    - --expectation-suite-path
    - inputValue: expectation_suite_path
    - --mlpipeline-ui-metadata
    - outputPath: mlpipeline_ui_metadata
