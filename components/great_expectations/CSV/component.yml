name: Validate csv using greatexpectations
inputs:
- name: csv
- name: expectation_suite
outputs:
- name: mlpipeline_ui_metadata
implementation:
  container:
    image: python:3.8
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'great-expectations==0.13.11' 'google-cloud-storage==1.29.0' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'great-expectations==0.13.11'
      'google-cloud-storage==1.29.0' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def validate_csv_using_greatexpectations(
          csv_path ,
          expectation_suite_path ,
          mlpipeline_ui_metadata_path ,
      ):

          expectation_suite = _read_from_gcs(expectation_suite_path, return_as=_JSON)
          data = _read_from_gcs(csv_path, return_as=_BYTES)
          df = ge.read_csv(data, expectation_suite=expectation_suite)
          result = df.validate()

          document_model = ValidationResultsPageRenderer().render(result)

          metadata = {
              'outputs' : [{
                'type': 'web-app',
                'storage': 'inline',
                'source': DefaultJinjaPageView().render(document_model),
              }]
          }
          with open(mlpipeline_ui_metadata_path, 'w') as metadata_file:
              json.dump(metadata, metadata_file)
          return metadata

      import argparse
      _parser = argparse.ArgumentParser(prog='Validate csv using greatexpectations', description='')
      _parser.add_argument("--csv", dest="csv_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--expectation-suite", dest="expectation_suite_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--mlpipeline-ui-metadata", dest="mlpipeline_ui_metadata_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = validate_csv_using_greatexpectations(**_parsed_args)

      _output_serializers = [

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --csv
    - inputPath: csv
    - --expectation-suite
    - inputPath: expectation_suite
    - --mlpipeline-ui-metadata
    - outputPath: mlpipeline_ui_metadata
