name: Pandas profiling components
inputs:
- {name: input_path, type: String}
outputs:
- {name: mlpipeline_ui_metadata}
implementation:
  container:
    image: python:3.8
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas-profiling' 'google-cloud-storage==1.29.0' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'pandas-profiling'
      'google-cloud-storage==1.29.0' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      echo -n "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def pandas_profiling_components(
              input_path,
              mlpipeline_ui_metadata_path,
      ):
          import json
          import pandas as pd
          from pandas_profiling import ProfileReport
          from google.cloud import storage
          import io

          _GCS_PREFIX = "gs://"

          def _read_from_gcs(gcs_path):
              storage_client = storage.Client()
              if not gcs_path.startswith(_GCS_PREFIX):
                  raise ValueError(
                      f"Path must start with 'gs://', found: {gcs_path}")

              bucket_name = gcs_path.split("/")[2]
              file_path = '/'.join(gcs_path.split("/")[3:])
              bucket = storage_client.get_bucket(bucket_name)
              blob = bucket.get_blob(file_path)
              if not blob:
                  raise ValueError(f"Path {gcs_path} do not exists.")

              result = blob.download_as_string()
              return io.BytesIO(result)

          data = _read_from_gcs(input_path)
          df = pd.read_csv(data, index_col=0)
          profile = ProfileReport(df, title="Profiling Report", explorative=True)

          metadata = {
              'outputs': [{
                  'type': 'web-app',
                  'storage': 'inline',
                  'source': profile.to_html(),
              }]
          }
          with open(mlpipeline_ui_metadata_path, 'w') as metadata_file:
              json.dump(metadata, metadata_file)
          return metadata

      import argparse
      _parser = argparse.ArgumentParser(prog='Pandas profiling components', description='')
      _parser.add_argument("--input-path", dest="input_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--mlpipeline-ui-metadata", dest="mlpipeline_ui_metadata_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = pandas_profiling_components(**_parsed_args)
    args:
    - --input-path
    - {inputValue: input_path}
    - --mlpipeline-ui-metadata
    - {outputPath: mlpipeline_ui_metadata}
